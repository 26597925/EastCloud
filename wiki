一个开源的微服务框架，功能还在完善中。

 定义服务
 服务文件
 生成服务工具
 https://github.com/protocolbuffers/protobuf/releases

https://www.grpc.io/docs/languages/go/quickstart/
https://developers.google.com/protocol-buffers/docs/reference/go-generated#package
 安装 gRPC
 1.# 下载 protoc 编译器
 wget https://github.com/protocolbuffers/protobuf/releases/download/v3.10.1/protoc-3.10.1-linux-x86_64.zip
 2.# 安装 protoc go 插件
 go get -u github.com/golang/protobuf/protoc-gen-go


 因为etcd直到3.4.12版本，grpc还是用的v1.26.0版本，所以protoc-gen-go要用低版本，方法如下：https://blog.csdn.net/yzf279533105/article/details/104416459

netstat -ano | find "8001"
taskkill /f /pid 16812


服务调用，配置服务到网关，然后线上集群，填写集群地址调用，集群配置网关服务。


工作任务，加定时任务（比如采集），调度执行是那里处理。


①、配置执行器
　　点击  执行器管理----》新增执行器---》，如下如下界面，然后填充此表格，点击保存即可。
　AppName：是每个执行器集群的唯一标示AppName, 执行器会周期性以AppName为对象进行自动注册。可通过该配置自动发现注册成功的执行器, 供任务调度时使用;

　　名称：执行器的名称, 因为AppName限制字母数字等组成,可读性不强, 名称为了提高执行器的可读性;

　　排序: 执行器的排序, 系统中需要执行器的地方,如任务新增, 将会按照该排序读取可用的执行器列表;

　　注册方式：调度中心获取执行器地址的方式，

　　　　自动注册：执行器自动进行执行器注册，调度中心通过底层注册表可以动态发现执行器机器地址；

　　　　手动录入：人工手动录入执行器的地址信息，多地址逗号分隔，供调度中心使用；

　　机器地址："注册方式"为"手动录入"时有效，支持人工维护执行器的地址信息；


执行器：任务的绑定的执行器，任务触发调度时将会自动发现注册成功的执行器, 实现任务自动发现功能;
另一方面也可以方便的进行任务分组。每个任务必须绑定一个执行器, 可在 "执行器管理" 进行设置。

　任务描述：任务的描述信息，便于任务管理；

　　路由策略：当执行器集群部署时，提供丰富的路由策略，包括；
　　　　　　FIRST（第一个）：固定选择第一个机器；
　　　　　　LAST（最后一个）：固定选择最后一个机器；
　　　　　　ROUND（轮询）：；
　　　　　　RANDOM（随机）：随机选择在线的机器；
　　　　　　CONSISTENT_HASH（一致性HASH）：每个任务按照Hash算法固定选择某一台机器，且所有任务均匀散列在不同机器上。
　　　　　　LEAST_FREQUENTLY_USED（最不经常使用）：使用频率最低的机器优先被选举；
　　　　　　LEAST_RECENTLY_USED（最近最久未使用）：最久为使用的机器优先被选举；
　　　　　　FAILOVER（故障转移）：按照顺序依次进行心跳检测，第一个心跳检测成功的机器选定为目标执行器并发起调度；
　　　　　　BUSYOVER（忙碌转移）：按照顺序依次进行空闲检测，第一个空闲检测成功的机器选定为目标执行器并发起调度；
　　　　　　SHARDING_BROADCAST(分片广播)：广播触发对应集群中所有机器执行一次任务，同时系统自动传递分片参数；可根据分片参数开发分片任务；
添加handler
执行器：
运行模式：
　　BEAN模式：任务以JobHandler方式维护在执行器端；需要结合 "JobHandler" 属性匹配执行器中任务；
    SHELL模式:shell(https://github.com/daviddengcn/gosl,https://golangtc.com/t/53cca103320b52060a000030)
    GLUE模式：内嵌引擎执行，解释引擎https://github.com/yuin/gopher-lua
JobHandler：运行模式为 "BEAN模式" 时生效
Cron：触发任务执行的Cron表达式；
阻塞处理策略：调度过于密集执行器来不及处理时的处理策略；
　　　　　　单机串行（默认）：调度请求进入单机执行器后，调度请求进入FIFO队列并以串行方式运行；
　　　　　　丢弃后续调度：调度请求进入单机执行器后，发现执行器存在运行的调度任务，本次请求将会被丢弃并标记为失败；
　　　　　　覆盖之前调度：调度请求进入单机执行器后，发现执行器存在运行的调度任务，将会终止运行中的调度任务并清空队列，然后运行本地调度任务；
　　子任务：每个任务都拥有一个唯一的任务ID(任务ID可以从任务列表获取)，当本任务执行结束并且执行成功时，将会触发子任务ID所对应的任务的一次主动调度。
　  任务超时时间：支持自定义任务超时时间，任务运行超时将会主动中断任务；
　　失败重试次数；支持自定义任务失败重试次数，当任务失败时将会按照预设的失败重试次数主动进行重试；
　　报警邮件：任务调度失败时邮件通知的邮箱地址，支持配置多邮箱地址，配置多个邮箱地址时用逗号分隔；
　　负责人：任务的负责人；
　　执行参数：任务执行所需的参数，多个参数时用逗号分隔，任务执行时将会把多个参数转换成数组传入；


第二种设计
 /bsw/scheduler/client/{appname}/{clientId}//基于调度器，给调度器给一个appname
 /bsw/scheduler/client：所有的执行器，只保存执行器的设备信息，比如id,host,cpu,内存,权重，是否启用,client启动心跳检测，进行选举。

 /bsw/scheduler/client/123
 {
 id:"123",
 host:"192.168.16.22",
 enable:true,
 weight:80
 }

 服务端检测client断开了，就需要把handler里面的client移除
 /bsw/scheduler/handler:所有的hander，注册进去,  hander的name名称唯一，不能重复
/bsw/scheduler/handler/demo
{
name:"demo"
client:[
    {
    "id":"123",
    }
]
}

/bsw/scheduler/job/jobid
{
id,
name,
remark,
cron,
runMode,
execMode,
jobhandler,
scheduler,
childJobId,
timeout,
RetryNumber,
userNmae,
email,
param,
status,//启动或关闭
}

 /bsw/scheduler/work/workid:监听添加work通知
 {
 ID,
 jobId,
 clientId,//服务端通过路由策略找到相应clientId进行通知客户端，客户端收到通知，看看是不是自己的id，能不能找到这个handler，找到后，修改状态，写入日志
 handlerName,
 time,
 status,
 }

 定时到了，如何去调度？如何通知执行器执行？
 找到拥有handler的client,根据路由策略选择适当的执行器执行。调度中心修改客户端的节点任务状态状态，客户端节点监听状态去执行。
 执行状态：未执行，执行中 （执行完成，把执行状态修改为为初始状态）
 运行状态：开始时间，完成时间，耗时时间，未运行，运行中，运行成功|运行失败


任务表：管理任务，添加任务，修改任务等等
任务调度日志：记录任务调度状态信息
任务执行日志: 记录任务执行信息


服务端：管理调度器，添加任务，定时到了处理任务，统计相关调度信息和执行信息

https://www.cnblogs.com/ysocean/p/10541151.html

任务列表
任务id, 任务名称，cron, 运行模式(bean,shell), 执行模式（串行，并行）, jobhandler, 调度策略，子任务id, 超时时间，重试次数，负责人，报警邮件，执行参数